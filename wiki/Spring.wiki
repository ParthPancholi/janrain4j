#labels Featured,janrain,engage,rpx,janrain4j,java,spring,springframework
Janrain4j integrates very well with the Spring framework. Just add the bean definition below to your `applicationContext.xml`:

{{{
<bean class="com.googlecode.janrain4j.api.engage.EngageServiceFactory" factory-method="getEngageService" />
}}}

And then autowire it in e.g. a Spring Controller class like:

{{{
@Autowired private EngageService engageService;
}}}

When configuring the `janrain4j.properties` file using the `Janrain4jConfigListener` servlet listener you also have more options to locate the file. You can e.g. use `classpath` locations and `${}` placeholders:

{{{
<context-param>
    <param-name>janrain4jConfigLocation</param-name>
    <param-value>classpath:META-INF/janrain4j-${com.google.appengine.runtime.environment}.properties</param-value>
</context-param>

<listener>
    <listener-class>com.googlecode.janrain4j.conf.Janrain4jConfigListener</listener-class>
</listener>

<listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
</listener>
}}}

See the [http://janrain4j.googlecode.com/svn/docs/1.0.x/apidocs/com/googlecode/janrain4j/conf/Janrain4jConfigListener.html Janrain4jConfigListener] apidocs for more information. Just make sure the `Janrain4jConfigListener` is configured before the Spring `ContextLoaderListener`, otherwise the !EngageService is created with configuration options form the default `janrain4j.properties` file.